
export type TestQuestionType = 'single-choice' | 'multi-choice';

// This defines a single, scorable test question
export interface TestQuestion {
  id: string;
  label: string; // The question text
  type: TestQuestionType;
  options: string[]; // The list of possible answers

  /**
   * The correct answer(s) for this question.
   * - For 'single-choice', this will be a single string.
   * - For 'multi-choice', this will be an array of strings.
   */
  correctAnswer: string | string[];

  /**
   * The number of points this question is worth. Optional.
   */
  points?: number;
  category: string;

  /**
   * Validation rules, e.g., to make a question mandatory.
   */
  validation?: {
    required?: boolean;
  };
}

// This defines the entire knowledge test for a job
// export interface TestAssessment {
//   jobId: number;
//   title: string;
//   questions: TestQuestion[];
// }

// The structure of an assessment created by HR for a specific job
// export interface CreatedAssesment {
//   jobId: number; // Primary Key
//   title: string;
//   topics:string[];
//   numberOfQuestions:number;
//   questions: TestQuestion[];
// }


export interface CreatedAssesment {
  jobId: number; // Primary Key
  title: string;
  topics: string[];
  numberOfQuestions: number;
  questionIds: string[]; // Changed from 'questions' to 'questionIds'
}



export interface AssessmentRequest {
  jobId: number;
  title:string;
  topics: string[];
  numberOfQuestions: number;
}

// The raw answer for a single question, sent from the frontend
interface UserAnswer {
  questionId: string;
  selectedAnswer: string;
}

// The entire payload sent from the frontend upon submission
export interface AssessmentSubmission {
  jobId: number;
  candidateId: number;
  answers: UserAnswer[];
}

// The final, calculated result that gets stored in the database
export interface AssessmentResult {
  id?: number; // This will be auto-generated by Dexie
  jobId: number;
  candidateId: number;
  score: number;
  totalQuestions: number;
  submittedAt: Date;
  answers: UserAnswer[];
}
// --- In your types file ---

export interface AssessmentSummary {
  jobId: number;
  attemptsCount: number;
  averageScore: number; // Will be a percentage (e.g., 75.5)
  passedCount: number;
  failedCount: number;
  highestScore: number; // Will be a percentage
  lowestScore: number; // Will be a percentage
  results: AssessmentResult[]; // The raw list of individual results
}

